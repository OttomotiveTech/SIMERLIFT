#ifndef LC_PROT_LCFU___ESSSTATE1__H
#define LC_PROT_LCFU___ESSSTATE1__H

#include <LC3CGBase.h>
#include <lcdt___battstate.h>
#include <lcfu_iec61131__NOT.h>
#include <lcfu_iec61131__TON.h>

/*                            Typedefs                         */
typedef struct _LC_TD_FunctionBlock_ESSSTATE1
{
  LC_TD_BOOL LC_VD_CHARGE;
  LC_TD_BOOL LC_VD_CHARGEPROTECT;
  LC_TD_BOOL LC_VD_CONTACTFBK;
  LC_TD_BOOL LC_VD_CONTACTFBKNEG;
  LC_TD_BOOL LC_VD_DISCHARGE;
  LC_TD_BOOL LC_VD_DISCHARGEPROTECT;
  LC_TD_BOOL LC_VD_FAULT;
  LC_TD_BOOL LC_VD_PRECHARGEOK;
  LC_TD_BOOL LC_VD_SHUTDOWN;
  LC_TD_BOOL LC_VD_SHUTDOWNCOMPLETE;
  LC_TD_BOOL LC_VD_CONTACT;
  LC_TD_BOOL LC_VD_CONTACTNEG;
  LC_TD_BOOL LC_VD_ENO;
  LC_TD_BOOL LC_VD_PRECHARGEON;
  LC_TD_DataType_BATTSTATE LC_VD_STATE;
  LC_TD_BOOL LC_VD_BATSTATETIMEOUT;
  LC_TD_TIME LC_VD_BATSTATEELAPSEDTIME;
  LC_TD_TIME LC_VD_BATSTATEINTERVAL;
  LC_TD_TIME LC_VD_STANDBYINTERVAL;
  LC_TD_DataType_BATTSTATE LC_VD_BATTERYSTATE;
  LC_TD_FunctionBlock_TON LC_VD_BATTIMER;
  LC_TD_DataType_BATTSTATE LC_VD_PREVSTATE;
} LCCG_StructAttrib LC_TD_FunctionBlock_ESSSTATE1;

/*                   ColdBoot Initialization Macro             */
#define LC_INIT_FunctionBlock_ESSSTATE1(p) \
{ \
  LC_INIT_BOOL(&((p)->LC_VD_DISCHARGE)); \
  LC_INIT_BOOL(&((p)->LC_VD_CHARGE)); \
  LC_INIT_BOOL(&((p)->LC_VD_SHUTDOWN)); \
  LC_INIT_BOOL(&((p)->LC_VD_PRECHARGEOK)); \
  LC_INIT_BOOL(&((p)->LC_VD_CONTACTFBK)); \
  LC_INIT_BOOL(&((p)->LC_VD_CONTACTFBKNEG)); \
  LC_INIT_BOOL(&((p)->LC_VD_DISCHARGEPROTECT)); \
  LC_INIT_BOOL(&((p)->LC_VD_CHARGEPROTECT)); \
  LC_INIT_BOOL(&((p)->LC_VD_SHUTDOWNCOMPLETE)); \
  LC_INIT_BOOL(&((p)->LC_VD_FAULT)); \
  LC_INIT_DataType_BATTSTATE(&((p)->LC_VD_STATE)); \
  LC_INIT_BOOL(&((p)->LC_VD_PRECHARGEON)); \
  LC_INIT_BOOL(&((p)->LC_VD_CONTACT)); \
  LC_INIT_BOOL(&((p)->LC_VD_CONTACTNEG)); \
  (p)->LC_VD_BATTERYSTATE = LC_ED__BATTSTATE__STANDBY; \
  (p)->LC_VD_PREVSTATE = LC_ED__BATTSTATE__STANDBY; \
  LC_INIT_FunctionBlock_TON(&((p)->LC_VD_BATTIMER)); \
  (p)->LC_VD_BATSTATEINTERVAL = LC_TIME_VALUE(RT_CC_CONST_LL(10),RT_CC_CONST_LL(0)); \
  LC_INIT_BOOL(&((p)->LC_VD_BATSTATETIMEOUT)); \
  LC_INIT_TIME(&((p)->LC_VD_BATSTATEELAPSEDTIME)); \
  (p)->LC_VD_STANDBYINTERVAL = LC_TIME_VALUE(RT_CC_CONST_LL(2),RT_CC_CONST_LL(0)); \
}

/*                   WarmBoot Initialization Macro             */
#define LC_WINIT_FunctionBlock_ESSSTATE1(p,RF) \
{ \
  LC_WINIT_BOOL(&((p)->LC_VD_DISCHARGE),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CHARGE),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_SHUTDOWN),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_PRECHARGEOK),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CONTACTFBK),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CONTACTFBKNEG),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_DISCHARGEPROTECT),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CHARGEPROTECT),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_SHUTDOWNCOMPLETE),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_FAULT),RF); \
  LC_WINIT_DataType_BATTSTATE(&((p)->LC_VD_STATE),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_PRECHARGEON),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CONTACT),RF); \
  LC_WINIT_BOOL(&((p)->LC_VD_CONTACTNEG),RF); \
  if (RF==0) (p)->LC_VD_BATTERYSTATE = LC_ED__BATTSTATE__STANDBY; \
  if (RF==0) (p)->LC_VD_PREVSTATE = LC_ED__BATTSTATE__STANDBY; \
  LC_WINIT_FunctionBlock_TON(&((p)->LC_VD_BATTIMER),0); \
  if (RF==0) (p)->LC_VD_BATSTATEINTERVAL = LC_TIME_VALUE(RT_CC_CONST_LL(10),RT_CC_CONST_LL(0)); \
  LC_WINIT_BOOL(&((p)->LC_VD_BATSTATETIMEOUT),RF); \
  LC_WINIT_TIME(&((p)->LC_VD_BATSTATEELAPSEDTIME),RF); \
  if (RF==0) (p)->LC_VD_STANDBYINTERVAL = LC_TIME_VALUE(RT_CC_CONST_LL(2),RT_CC_CONST_LL(0)); \
}

/*                            Prototype                        */
void  lcfu___ESSSTATE1(LC_TD_FunctionBlock_ESSSTATE1* LC_this, struct _lcoplck_epdb_1_impl* pEPDB);


#endif
